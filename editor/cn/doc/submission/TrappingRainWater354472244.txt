class Solution {
    public int trap(int[] height) {
        Stack<Integer> stack = new Stack<Integer>();
        int res = 0;
        for (int i = 0; i < height.length; i++) {
            while (!stack.isEmpty() && height[i] > height[stack.peek()]) {
                int top = stack.pop();
                if (stack.isEmpty()) {
                    continue;
                }
                int left = stack.peek();
                int width = i - left - 1;
                int minHeight = Math.min(height[i], height[left]) - height[top];
                res += minHeight * width;
            }
            stack.push(i);
        }
        return res;
    }
}

//runtime:13 ms
//memory:42.2 MB
